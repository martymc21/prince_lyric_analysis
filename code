---
title: "Prince_lyric_analysis"
output: html_document:
  keep_md: true
---



```{r}
install.packages("magrittr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidytext")
library(ggplot2)
library(tidytext)
```

```{r}
names(prince_orig)
```

Ë†
```{r}
dim(prince)
```
```{r}
str(prince[139, ]$lyrics, nchar.max = 300)
```

```{r}
# function to expand contractions in an English-language source
fix.contractions2 <- function(doc) {
  # "won't" is a special case as it does not expand to "wo not"
  doc <- gsub("won't", "will not", doc)
  doc <- gsub("can't", "can not", doc)
  doc <- gsub("n't", " not", doc)
  doc <- gsub("'ll", " will", doc)
  doc <- gsub("'re", " are", doc)
  doc <- gsub("beliehave", " believe", doc)
  doc <- gsub("controhaversy", "controversy", doc)
  
  doc <- gsub("'m", " am", doc)
  doc <- gsub("'d", " would", doc)
  # 's could be 'is' or could be possessive: it has no expansion
  doc <- gsub("'s", "", doc)
  return(doc)
}

# fix (expand) contractions
prince$lyrics <- sapply(prince$lyrics, fix.contractions2)

```

```{r}
# function to remove special characters
removeSpecialChars <- function(x) gsub("[^a-zA-Z0-9 ]", " ", x)
# remove special characters
prince$lyrics <- sapply(prince$lyrics, removeSpecialChars)

```

```{r}
# convert everything to lower case
prince$lyrics <- sapply(prince$lyrics, tolower)
```

```{r}
str(prince[139, ]$lyrics, nchar.max = 300)
```

```{r}
str(prince[139, ]$lyrics, nchar.max = 300)
```
```{r}
summary(prince)
```
```{r}
#creating the decades column
library(magrittr)
library(dplyr)
prince <- prince %>%
  mutate(decade =
           ifelse(prince$year %in% 1978:1979, "1970s",
           ifelse(prince$year %in% 1980:1989, "1980s",
           ifelse(prince$year %in% 1990:1999, "1990s",
           ifelse(prince$year %in% 2000:2009, "2000s",
           ifelse(prince$year %in% 2010:2015, "2010s",
                  "NA"))))))
```

```{r}
#creating the chart level column
prince <- prince %>%
  mutate(chart_level =
           ifelse(prince$peak %in% 1:10, "Top 10",
           ifelse(prince$peak %in% 11:100, "Top 100", "Uncharted")))
```

```{r}
#create binary field called charted showing if a song hit the charts @ all

prince <- prince %>%
  mutate(charted = 
           ifelse(prince$peak %in% 1:100, "Charted", "Uncharted"))

#save the new dataset to.csv for later use
write.csv(prince, file = "prince_new.csv")
```

```{r}
#define some colors to use throughout 
my_color <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7", "#D55E00")

theme_lyrics <- function()
{
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.x = element_blank(),
        axis.ticks = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.position = "none"
        )
}
```

```{r}

prince %>%
  filter(decade != 'NA') %>%
  group_by(decade, charted) %>%
  summarise(number_of_songs = n()) %>%
  ggplot() +
  geom_bar(aes(x = decade, y = number_of_songs,
               fill = charted), stat = 'identity') +
  theme(plot.title = element_text(hjust = 0.5),
        legend.title = element_blank(),
        panel.grid.minor = element_blank()) +
  ggtitle("Released Songs") +
  labs(x = NULL, y = 'Song Count')
```
```{r}
#creating new graph to show only charted songs
charted_songs_over_time <- prince %>%
  filter(peak > 0) %>%
  group_by(decade, chart_level) %>%
  summarise(number_of_songs = n ())

charted_songs_over_time %>%
  ggplot() +
  geom_bar(aes(x = decade, y = number_of_songs,
               fill = chart_level), stat = 'identity') +
  theme(plot.title = element_text(hjust = 0.5),
        legend.title = element_blank(),
        panel.grid.minor = element_blank()) +
  labs(x = NULL, y = "Song Count") +
  ggtitle("Charted Songs")
  
```

```{r}
#looking @ the full dataset
prince %>%
  group_by(decade, chart_level) %>%
  summarise(number_of_songs = n()) %>%
  ggplot() +
  geom_bar(aes(x = decade, y = number_of_songs,
               fill = chart_level), stat = "identity") +
  theme(plot.title = element_text(hjust = 0.5),
        legend.title = element_blank(),
        panel.grid.minor = element_blank()) +
  labs(x = NULL, y = "Song Count") +
  ggtitle("All songs in data")
```

```{r}
library(knitr) #dynamic reporting
install.packages("formattable")
install.packages("kableExtra")

library(kableExtra) #create a nicely formatted HTML table
library(formattable) 
prince %>%
  filter(peak == "1") %>%
  select(year, song, peak) %>%
  arrange(year) %>%
  mutate(year = color_tile("lightblue", "lightgreen")(year)) %>%
  mutate(peak = color_tile("lightgreen", "lightgreen")(peak)) %>%
  kable("html", escape = FALSE, align = 'c', caption = "Prince's No. 1 Songs") %>%
  kable_styling(bootstrap_options = 
                  c("striped", "condensed", "bordered"),
                full_width = FALSE)

```

```{r}
undesirable_words <-c("prince", "chorus", "repeat", "lyrics", "theres", "bridge", "fe0f", "yeah", "baby","alright","wanna", "gonna", "chorus", "verse", "whoa", "gotta", "make", "miscellaneous", "2","4", "ooh", "uurh", "pheromone", "poompoom", "3121", "matic", "ai", "ca", "la", "hey", "na", "da", "uh", "tin", "ll", "transcription", "repeats")


```

```{r}
library(tidytext)
head(sample(stop_words$word, 15), 15)
```

```{r}
#unnest and remove stop, undesirable and short words
prince_words_filtered <- prince %>%
  unnest_tokens(word, lyrics) %>%
  anti_join(stop_words) %>%
  distinct() %>%
  filter(!word %in% undesirable_words) %>%
  filter(nchar(word) > 3)
```
```{r}
class(prince_words_filtered)
```

```{r}
dim(prince_words_filtered)
```

```{r}
prince_words_filtered %>%
  filter(word == "race") %>%
  select(word, song, year, peak, decade, chart_level, charted)
arrange() %>%
top_n(10, song) %>%
mutate(song = color_tile("lightblue","lightblue")(song)) %>%
mutate(word = color_tile("lightgreen","lightgreen")(word)) %>%
kable("html", escape = FALSE, align = "c", caption = "Tokenized Format Example") %>% 
kable_styling(bootstrap_options = 
                c("striped", "condensed", "bordered"),
              full_width = FALSE)
```

